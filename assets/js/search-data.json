{
  
    
        "post0": {
            "title": "Seaborn",
            "content": ". Hello, Seaborn . import pandas as pd pd.plotting.register_matplotlib_converters() import matplotlib.pyplot as plt import seaborn as sns . fifa_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/fifa.csv&quot; # Read the file into a variable fifa_data fifa_data = pd.read_csv(fifa_filepath, index_col=&quot;Date&quot;, parse_dates=True) # Set the width and height of the figure plt.figure(figsize=(16,6)) # Line chart showing how FIFA rankings evolved over time sns.lineplot(data=fifa_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa69ac0e0d0&gt; . Line Charts . spotify_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/spotify.csv&quot; # Read the file into a variable spotify_data spotify_data = pd.read_csv(spotify_filepath, index_col=&quot;Date&quot;, parse_dates=True) # Set the width and height of the figure plt.figure(figsize=(14,6)) # Add title plt.title(&quot;Daily Global Streams of Popular Songs in 2017-2018&quot;) sns.lineplot(data=spotify_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa69ac6fdd0&gt; . plt.figure(figsize=(14,6)) # Add title plt.title(&quot;Daily Global Streams of Popular Songs in 2017-2018&quot;) # Line chart showing daily global streams of &#39;Shape of You&#39; sns.lineplot(data=spotify_data[&#39;Shape of You&#39;], label=&quot;Shape of You&quot;) # Line chart showing daily global streams of &#39;Despacito&#39; sns.lineplot(data=spotify_data[&#39;Despacito&#39;], label=&quot;Despacito&quot;) # Add label for horizontal axis plt.xlabel(&quot;Date&quot;) . Text(0.5, 0, &#39;Date&#39;) . Bar Charts and Heatmaps . flight_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/flight_delays.csv&quot; # Read the file into a variable flight_data flight_data = pd.read_csv(flight_filepath, index_col=&quot;Month&quot;) . plt.figure(figsize=(10,6)) # Add title plt.title(&quot;Average Arrival Delay for Spirit Airlines Flights, by Month&quot;) # Bar chart showing average arrival delay for Spirit Airlines flights by month sns.barplot(x=flight_data.index, y=flight_data[&#39;NK&#39;]) # Add label for vertical axis plt.ylabel(&quot;Arrival delay (in minutes)&quot;) . Text(0, 0.5, &#39;Arrival delay (in minutes)&#39;) . plt.figure(figsize=(14,7)) # Add title plt.title(&quot;Average Arrival Delay for Each Airline, by Month&quot;) # Heatmap showing average arrival delay for each airline by month sns.heatmap(data=flight_data, annot=True) # Add label for horizontal axis plt.xlabel(&quot;Airline&quot;) . Text(0.5, 42.0, &#39;Airline&#39;) . Scatter Plots . insurance_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/insurance.csv&quot; # Read the file into a variable insurance_data insurance_data = pd.read_csv(insurance_filepath) . sns.scatterplot(x=insurance_data[&#39;bmi&#39;], y=insurance_data[&#39;charges&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa69af65c50&gt; . sns.regplot(x=insurance_data[&#39;bmi&#39;], y=insurance_data[&#39;charges&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa691cc0f90&gt; . sns.scatterplot(x=insurance_data[&#39;bmi&#39;], y=insurance_data[&#39;charges&#39;], hue=insurance_data[&#39;smoker&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa691b73650&gt; . sns.lmplot(x=&quot;bmi&quot;, y=&quot;charges&quot;, hue=&quot;smoker&quot;, data=insurance_data) . &lt;seaborn.axisgrid.FacetGrid at 0x7fa68d375d10&gt; . sns.swarmplot(x=insurance_data[&#39;smoker&#39;], y=insurance_data[&#39;charges&#39;]) . /usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 67.3% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot. warnings.warn(msg, UserWarning) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d286c10&gt; . Distributions . iris_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris.csv&quot; # Read the file into a variable iris_data iris_data = pd.read_csv(iris_filepath, index_col=&quot;Id&quot;) # Print the first 5 rows of the data iris_data.head() . Sepal Length (cm) Sepal Width (cm) Petal Length (cm) Petal Width (cm) Species . Id . 1 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 2 4.9 | 3.0 | 1.4 | 0.2 | Iris-setosa | . 3 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 4 4.6 | 3.1 | 1.5 | 0.2 | Iris-setosa | . 5 5.0 | 3.6 | 1.4 | 0.2 | Iris-setosa | . sns.distplot(a=iris_data[&#39;Petal Length (cm)&#39;], kde=False) . /usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d1b5990&gt; . sns.kdeplot(data=iris_data[&#39;Petal Length (cm)&#39;], shade=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d12ec10&gt; . sns.jointplot(x=iris_data[&#39;Petal Length (cm)&#39;], y=iris_data[&#39;Sepal Width (cm)&#39;], kind=&quot;kde&quot;, shade=True) . &lt;seaborn.axisgrid.JointGrid at 0x7fa68cd39f50&gt; . iris_set_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris_setosa.csv&quot; iris_ver_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris_versicolor.csv&quot; iris_vir_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris_virginica.csv&quot; # Read the files into variables iris_set_data = pd.read_csv(iris_set_filepath, index_col=&quot;Id&quot;) iris_ver_data = pd.read_csv(iris_ver_filepath, index_col=&quot;Id&quot;) iris_vir_data = pd.read_csv(iris_vir_filepath, index_col=&quot;Id&quot;) . sns.distplot(a=iris_set_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-setosa&quot;, kde=False) sns.distplot(a=iris_ver_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-versicolor&quot;, kde=False) sns.distplot(a=iris_vir_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-virginica&quot;, kde=False) # Add title plt.title(&quot;Histogram of Petal Lengths, by Species&quot;) # Force legend to appear plt.legend() . /usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . &lt;matplotlib.legend.Legend at 0x7fa68d0e7150&gt; . sns.kdeplot(data=iris_set_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-setosa&quot;, shade=True) sns.kdeplot(data=iris_ver_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-versicolor&quot;, shade=True) sns.kdeplot(data=iris_vir_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-virginica&quot;, shade=True) # Add title plt.title(&quot;Distribution of Petal Lengths, by Species&quot;) . Text(0.5, 1.0, &#39;Distribution of Petal Lengths, by Species&#39;) . Choosing Plot Types and Custom Styles . plt.figure(figsize=(12,6)) sns.lineplot(data=spotify_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d55da90&gt; . sns.set_style(&quot;dark&quot;) # Line chart plt.figure(figsize=(12,6)) sns.lineplot(data=spotify_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68cad4750&gt; .",
            "url": "https://lenguist.github.io/site/kaggle/2021/03/12/seaborn.html",
            "relUrl": "/kaggle/2021/03/12/seaborn.html",
            "date": " • Mar 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": ". Data visualization with Seaborn . Kaggle course notes . Hello, Seaborn . import pandas as pd pd.plotting.register_matplotlib_converters() import matplotlib.pyplot as plt import seaborn as sns . fifa_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/fifa.csv&quot; # Read the file into a variable fifa_data fifa_data = pd.read_csv(fifa_filepath, index_col=&quot;Date&quot;, parse_dates=True) # Set the width and height of the figure plt.figure(figsize=(16,6)) # Line chart showing how FIFA rankings evolved over time sns.lineplot(data=fifa_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa69ac0e0d0&gt; . Line Charts . spotify_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/spotify.csv&quot; # Read the file into a variable spotify_data spotify_data = pd.read_csv(spotify_filepath, index_col=&quot;Date&quot;, parse_dates=True) # Set the width and height of the figure plt.figure(figsize=(14,6)) # Add title plt.title(&quot;Daily Global Streams of Popular Songs in 2017-2018&quot;) sns.lineplot(data=spotify_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa69ac6fdd0&gt; . plt.figure(figsize=(14,6)) # Add title plt.title(&quot;Daily Global Streams of Popular Songs in 2017-2018&quot;) # Line chart showing daily global streams of &#39;Shape of You&#39; sns.lineplot(data=spotify_data[&#39;Shape of You&#39;], label=&quot;Shape of You&quot;) # Line chart showing daily global streams of &#39;Despacito&#39; sns.lineplot(data=spotify_data[&#39;Despacito&#39;], label=&quot;Despacito&quot;) # Add label for horizontal axis plt.xlabel(&quot;Date&quot;) . Text(0.5, 0, &#39;Date&#39;) . Bar Charts and Heatmaps . flight_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/flight_delays.csv&quot; # Read the file into a variable flight_data flight_data = pd.read_csv(flight_filepath, index_col=&quot;Month&quot;) . plt.figure(figsize=(10,6)) # Add title plt.title(&quot;Average Arrival Delay for Spirit Airlines Flights, by Month&quot;) # Bar chart showing average arrival delay for Spirit Airlines flights by month sns.barplot(x=flight_data.index, y=flight_data[&#39;NK&#39;]) # Add label for vertical axis plt.ylabel(&quot;Arrival delay (in minutes)&quot;) . Text(0, 0.5, &#39;Arrival delay (in minutes)&#39;) . plt.figure(figsize=(14,7)) # Add title plt.title(&quot;Average Arrival Delay for Each Airline, by Month&quot;) # Heatmap showing average arrival delay for each airline by month sns.heatmap(data=flight_data, annot=True) # Add label for horizontal axis plt.xlabel(&quot;Airline&quot;) . Text(0.5, 42.0, &#39;Airline&#39;) . Scatter Plots . insurance_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/insurance.csv&quot; # Read the file into a variable insurance_data insurance_data = pd.read_csv(insurance_filepath) . sns.scatterplot(x=insurance_data[&#39;bmi&#39;], y=insurance_data[&#39;charges&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa69af65c50&gt; . sns.regplot(x=insurance_data[&#39;bmi&#39;], y=insurance_data[&#39;charges&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa691cc0f90&gt; . sns.scatterplot(x=insurance_data[&#39;bmi&#39;], y=insurance_data[&#39;charges&#39;], hue=insurance_data[&#39;smoker&#39;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa691b73650&gt; . sns.lmplot(x=&quot;bmi&quot;, y=&quot;charges&quot;, hue=&quot;smoker&quot;, data=insurance_data) . &lt;seaborn.axisgrid.FacetGrid at 0x7fa68d375d10&gt; . sns.swarmplot(x=insurance_data[&#39;smoker&#39;], y=insurance_data[&#39;charges&#39;]) . /usr/local/lib/python3.7/dist-packages/seaborn/categorical.py:1296: UserWarning: 67.3% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot. warnings.warn(msg, UserWarning) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d286c10&gt; . Distributions . iris_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris.csv&quot; # Read the file into a variable iris_data iris_data = pd.read_csv(iris_filepath, index_col=&quot;Id&quot;) # Print the first 5 rows of the data iris_data.head() . Sepal Length (cm) Sepal Width (cm) Petal Length (cm) Petal Width (cm) Species . Id . 1 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 2 4.9 | 3.0 | 1.4 | 0.2 | Iris-setosa | . 3 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 4 4.6 | 3.1 | 1.5 | 0.2 | Iris-setosa | . 5 5.0 | 3.6 | 1.4 | 0.2 | Iris-setosa | . sns.distplot(a=iris_data[&#39;Petal Length (cm)&#39;], kde=False) . /usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d1b5990&gt; . sns.kdeplot(data=iris_data[&#39;Petal Length (cm)&#39;], shade=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d12ec10&gt; . sns.jointplot(x=iris_data[&#39;Petal Length (cm)&#39;], y=iris_data[&#39;Sepal Width (cm)&#39;], kind=&quot;kde&quot;, shade=True) . &lt;seaborn.axisgrid.JointGrid at 0x7fa68cd39f50&gt; . iris_set_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris_setosa.csv&quot; iris_ver_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris_versicolor.csv&quot; iris_vir_filepath = &quot;/content/drive/MyDrive/Code/kaggle/data/iris_virginica.csv&quot; # Read the files into variables iris_set_data = pd.read_csv(iris_set_filepath, index_col=&quot;Id&quot;) iris_ver_data = pd.read_csv(iris_ver_filepath, index_col=&quot;Id&quot;) iris_vir_data = pd.read_csv(iris_vir_filepath, index_col=&quot;Id&quot;) . sns.distplot(a=iris_set_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-setosa&quot;, kde=False) sns.distplot(a=iris_ver_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-versicolor&quot;, kde=False) sns.distplot(a=iris_vir_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-virginica&quot;, kde=False) # Add title plt.title(&quot;Histogram of Petal Lengths, by Species&quot;) # Force legend to appear plt.legend() . /usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms). warnings.warn(msg, FutureWarning) . &lt;matplotlib.legend.Legend at 0x7fa68d0e7150&gt; . sns.kdeplot(data=iris_set_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-setosa&quot;, shade=True) sns.kdeplot(data=iris_ver_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-versicolor&quot;, shade=True) sns.kdeplot(data=iris_vir_data[&#39;Petal Length (cm)&#39;], label=&quot;Iris-virginica&quot;, shade=True) # Add title plt.title(&quot;Distribution of Petal Lengths, by Species&quot;) . Text(0.5, 1.0, &#39;Distribution of Petal Lengths, by Species&#39;) . Choosing Plot Types and Custom Styles . plt.figure(figsize=(12,6)) sns.lineplot(data=spotify_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68d55da90&gt; . sns.set_style(&quot;dark&quot;) # Line chart plt.figure(figsize=(12,6)) sns.lineplot(data=spotify_data) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa68cad4750&gt; .",
            "url": "https://lenguist.github.io/site/2021/03/09/kaggle-seaborn.html",
            "relUrl": "/2021/03/09/kaggle-seaborn.html",
            "date": " • Mar 9, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lenguist.github.io/site/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lenguist.github.io/site/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lenguist.github.io/site/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lenguist.github.io/site/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}